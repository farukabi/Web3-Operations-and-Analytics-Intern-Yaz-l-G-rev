
import Debug "mo:base/Debug";
import Int "mo:base/Int";

actor HesapMakinesi {
    
    var sonuc : Int = 0;
    
    
    public func toplama(sayi : Int) : async Int {
        sonuc += sayi;
        return sonuc;
    };
    
    
    public func cikarma(sayi : Int) : async Int {
        sonuc -= sayi;
        return sonuc;
    };
    
    
    public func carpma(sayi : Int) : async Int {
        sonuc *= sayi;
        return sonuc;
    };
    
    
    public func bolme(sayi : Int) : async ?Int {
        if (sayi == 0) {
            // Hata mesajı yazdırmak için `Debug.print` kullanabiliriz
            Debug.print("Hata: 0'a bölme yapılamaz");
            return null;
        };
        sonuc /= sayi;
        return ?sonuc;
    };
    
    
    public func sifirla() : async () {
        sonuc := 0;
    };
    
    
    public func mevcutSonuc() : async Int {
        return sonuc;
    };
    
    
    public func hesapMakinesiOrnegi() : async () {
        
        let toplamSonuc = await toplama(10);
        Debug.print("Toplama Sonucu: " # Int.toText(toplamSonuc)); // 10
        
        
        let cikarmaSonuc = await cikarma(5);
        Debug.print("Çıkarma Sonucu: " # Int.toText(cikarmaSonuc)); // 5
        
        
        let carpmaSonuc = await carpma(3);
        Debug.print("Çarpma Sonucu: " # Int.toText(carpmaSonuc)); // 15
        
        
        switch (await bolme(3)) {
            case (?bolmeSonuc) {
                Debug.print("Bölme Sonucu: " # Int.toText(bolmeSonuc)); // 5
            };
            case null {
                Debug.print("Bölme işlemi başarısız.");
            };
        };
        
        
        await sifirla();
        Debug.print("Sonuç sıfırlandı. Mevcut Sonuç: " # Int.toText(await mevcutSonuc())); // 0
    };
};
